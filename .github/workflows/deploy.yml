name: Deploy to Azure

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Stop Nginx and clear port 5000
      run: |
        ssh-keyscan -H ${{ secrets.AZURE_HOST }} >> ~/.ssh/known_hosts
        # Stop Nginx service
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo systemctl stop nginx || true"
        # Disable Nginx from starting at boot
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo systemctl disable nginx || true"
        # Kill any other processes using port 5000
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo lsof -t -i:5000 | xargs -r sudo kill || true"
    
    - name: Deploy application
      run: |
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "mkdir -p ~/flask-app"
        scp -r ./* ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }}:~/flask-app/
    
    - name: Setup Flask app and create systemd service
      run: |
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "cd ~/flask-app && \
          sudo apt update && \
          sudo apt install -y python3-pip python3.10-venv && \
          python3 -m venv venv && \
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          
          # Create a systemd service file
          echo '[Unit]
          Description=Flask Application
          After=network.target

          [Service]
          User=${{ secrets.AZURE_USERNAME }}
          WorkingDirectory=/home/${{ secrets.AZURE_USERNAME }}/flask-app
          Environment=\"PATH=/home/${{ secrets.AZURE_USERNAME }}/flask-app/venv/bin\"
          ExecStart=/home/${{ secrets.AZURE_USERNAME }}/flask-app/venv/bin/gunicorn --bind=0.0.0.0:5000 app:app
          Restart=always

          [Install]
          WantedBy=multi-user.target' | sudo tee /etc/systemd/system/flask-app.service && \
          
          # Reload systemd, enable and start the service
          sudo systemctl daemon-reload && \
          sudo systemctl enable flask-app.service && \
          sudo systemctl start flask-app.service"
    
    - name: Check service status
      run: |
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "sudo systemctl status flask-app.service"
        ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_HOST }} "curl http://localhost:5000/ || echo 'App not responding on localhost'"